# Compose file for bringing up a simple local Divvi Up environment. This is not suitable for production!

x-janus-common: &janus_common
  image: ${JANUS_AGGREGATOR_IMAGE:-us-west2-docker.pkg.dev/divviup-artifacts-public/janus/janus_aggregator:0.7.7}
  restart: always
  healthcheck:
    test: ["CMD", "/bin/sh", "-c", "wget http://0.0.0.0:8000/healthz -O - >/dev/null"]
    interval: 1s
    retries: 10
  depends_on:
    janus_1_migrate:
      condition: service_completed_successfully
    janus_2_migrate:
      condition: service_completed_successfully

x-janus-migrate: &janus_migrate
  image: ${JANUS_MIGRATOR_IMAGE:-us-west2-docker.pkg.dev/divviup-artifacts-public/janus/janus_db_migrator:0.7.7}
  command:
    - migrate
    - run
    - --source
    - /migrations
    - --connect-timeout
    - "60"
  depends_on:
    postgres:
      condition: service_healthy

x-janus-environment: &janus_environment
  RUST_LOG: info
  PGPASSWORD: postgres
  DATASTORE_KEYS: 1B6szboUUtMfyrLsIVE20g
  AGGREGATOR_API_AUTH_TOKENS: "0000"

x-divviup-image: &divviup_image
  image: ${DIVVIUP_API_IMAGE:-us-west2-docker.pkg.dev/divviup-artifacts-public/divviup-api/divviup_api_integration_test:0.3.16}

x-divviup-environment: &divviup_environment
  RUST_LOG: info
  AUTH_URL: https://auth.example
  AUTH_CLIENT_ID: fake
  AUTH_CLIENT_SECRET: fake
  SESSION_SECRETS: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  DATABASE_ENCRYPTION_KEYS: heHIWC_qxHzdglI0VgLopQ
  AUTH_AUDIENCE: https://app.example
  APP_URL: http://localhost:8081
  DATABASE_URL: postgres://postgres:postgres@postgres:5432/divviup
  API_URL: http://localhost:8080
  POSTMARK_TOKEN: fake
  EMAIL_ADDRESS: the@from.address

services:
  postgres:
    image: docker.io/library/postgres:16
    user: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test:
        - "CMD"
        - "/bin/sh"
        - "-c"
        - |
          psql postgres://postgres@127.0.0.1/divviup -c "" && \
            psql postgres://postgres@127.0.0.1/janus_1 -c ""  && \
            psql postgres://postgres@127.0.0.1/janus_2 -c ""
      interval: 1s
      retries: 10
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
    configs:
      - source: postgres_init
        target: /docker-entrypoint-initdb.d/postgres_init.sql

  divviup_api_migrate:
    image: ${DIVVIUP_API_MIGRATOR_IMAGE:-us-west2-docker.pkg.dev/divviup-artifacts-public/divviup-api/divviup_api:0.3.16}
    entrypoint:
      - /migration
      - up
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/divviup
    depends_on:
      postgres:
        condition: service_healthy

  pair_aggregator:
    <<: *divviup_image
    entrypoint:
      - /bin/sh
      - -c
      - |
        test -f /tmp/done || \
        (/divviup --url=http://localhost:8080 --token="" \
          aggregator create \
          --name=leader --api-url=http://janus_1_aggregator:8080/aggregator-api \
          --bearer-token=0000 \
          --first-party --shared && \
        /divviup --url=http://localhost:8080 --token="" \
          account create demo && \
        /divviup --url=http://localhost:8080 --token="" \
          aggregator create \
          --name=helper --api-url=http://janus_2_aggregator:8080/aggregator-api \
          --bearer-token=0000 && \
        touch /tmp/done)
    network_mode: service:divviup_api
    depends_on:
      divviup_api:
        condition: service_healthy
      janus_1_aggregator:
        condition: service_healthy
      janus_2_aggregator:
        condition: service_healthy

  divviup_api:
    <<: *divviup_image
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "wget http://0.0.0.0:8080/health -O - >/dev/null"]
      interval: 1s
      retries: 10
    ports:
      - "8080:8080"
    environment:
      <<: *divviup_environment
    depends_on:
      divviup_api_migrate:
        condition: service_completed_successfully

  # Run a second divviup_api just to serve static assets, so that users can browse to localhost:8081
  # and play with the console. It'd be nice to do this from service divviup_api, but it only binds a
  # single port and insists on serving assets and its API on distinct hostnames.
  static_assets:
    <<: *divviup_image
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "wget http://0.0.0.0:8081/health -O - >/dev/null"]
      interval: 1s
      retries: 10
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      <<: *divviup_environment
    # Hack: if the last service to be started exits with status 0, then `docker compose up --wait`
    # treats that as a failure. So we force divviup_api_vite to start last. Another option would be
    # to add a health check to pair_aggregator as in ([1]), but the timing is brittle (the main
    # process has to last long enough for the health check to succeed at least once) so it's easier
    # and more reliable to add this dependency.
    #
    # [1]: https://github.com/docker/compose/issues/11774
    # https://github.com/docker/compose/issues/10596
    depends_on:
      pair_aggregator:
        condition: service_completed_successfully

  janus_1_migrate:
    <<: *janus_migrate
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/janus_1

  janus_1_aggregator:
    <<: *janus_common
    entrypoint:
      - /bin/sh
      - -c
      # Crimes: janus_2_aggregator's DAP API is localhost:9002 in the divviup-api aggregator object,
      # but that address is only valid in the host network, outside of Docker Compose. But we need
      # various parts of janus_1 to be able to reach janus_2_aggregator there. So we run nc(1)
      # alongside the Janus processes so that it listens on localhost:9002 and forwards traffic to
      # janus_2_aggregator:8080, which _does_ exist on the Docker Compose network.
      - |
        nc -p 9002 -lk -e nc janus_2_aggregator 8080 & \
          /janus_aggregator aggregator
    configs:
      - janus_1_aggregator.yaml
    ports:
      - "9001:8080"
    environment:
      CONFIG_FILE: /janus_1_aggregator.yaml
      <<: *janus_environment

  janus_1_aggregation_job_creator:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "aggregation_job_creator"]
    configs:
      - janus_1_aggregation_job_creator.yaml
    environment:
      CONFIG_FILE: /janus_1_aggregation_job_creator.yaml
      <<: *janus_environment

  janus_1_aggregation_job_driver:
    <<: *janus_common
    entrypoint:
      - /bin/sh
      - -c
      - |
        nc -p 9002 -lk -e nc janus_2_aggregator 8080 & \
          /janus_aggregator aggregation_job_driver
    configs:
      - janus_1_aggregation_job_driver.yaml
    environment:
      CONFIG_FILE: /janus_1_aggregation_job_driver.yaml
      <<: *janus_environment

  janus_1_collection_job_driver:
    <<: *janus_common
    entrypoint:
      - /bin/sh
      - -c
      - |
        nc -p 9002 -lk -e nc janus_2_aggregator 8080 & \
          /janus_aggregator collection_job_driver
    configs:
      - janus_1_collection_job_driver.yaml
    environment:
      CONFIG_FILE: /janus_1_collection_job_driver.yaml
      <<: *janus_environment

  janus_1_garbage_collector:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "garbage_collector"]
    configs:
      - janus_1_garbage_collector.yaml
    environment:
      CONFIG_FILE: /janus_1_garbage_collector.yaml
      <<: *janus_environment

  janus_2_migrate:
    <<: *janus_migrate
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/janus_2

  janus_2_aggregator:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "aggregator"]
    configs:
      - janus_2_aggregator.yaml
    ports:
      - "9002:8080"
    environment:
      CONFIG_FILE: /janus_2_aggregator.yaml
      <<: *janus_environment

  janus_2_aggregation_job_creator:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "aggregation_job_creator"]
    configs:
      - janus_2_aggregation_job_creator.yaml
    environment:
      CONFIG_FILE: /janus_2_aggregation_job_creator.yaml
      <<: *janus_environment

  janus_2_aggregation_job_driver:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "aggregation_job_driver"]
    configs:
      - janus_2_aggregation_job_driver.yaml
    environment:
      CONFIG_FILE: /janus_2_aggregation_job_driver.yaml
      <<: *janus_environment

  janus_2_collection_job_driver:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "collection_job_driver"]
    configs:
      - janus_2_collection_job_driver.yaml
    environment:
      CONFIG_FILE: /janus_2_collection_job_driver.yaml
      <<: *janus_environment

  janus_2_garbage_collector:
    <<: *janus_common
    entrypoint: ["/janus_aggregator", "garbage_collector"]
    configs:
      - janus_2_garbage_collector.yaml
    environment:
      CONFIG_FILE: /janus_2_garbage_collector.yaml
      <<: *janus_environment

configs:
  postgres_init:
    content: |
      CREATE DATABASE divviup;
      CREATE DATABASE janus_1;
      CREATE DATABASE janus_2;

  janus_1_aggregator.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_1"
      health_check_listen_address: "0.0.0.0:8000"
      listen_address: "0.0.0.0:8080"
      max_upload_batch_size: 100
      max_upload_batch_write_delay_ms: 250
      batch_aggregation_shard_count: 32
      aggregator_api:
        path_prefix: "aggregator-api"
        public_dap_url: "http://localhost:9001"

  janus_1_aggregation_job_creator.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_1"
      health_check_listen_address: "0.0.0.0:8000"
      batch_aggregation_shard_count: 32
      tasks_update_frequency_secs: 10
      aggregation_job_creation_interval_secs: 10
      min_aggregation_job_size: 10
      max_aggregation_job_size: 100

  janus_1_aggregation_job_driver.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_1"
      health_check_listen_address: "0.0.0.0:8000"
      job_discovery_interval_secs: 10
      max_concurrent_job_workers: 10
      worker_lease_duration_secs: 600
      worker_lease_clock_skew_allowance_secs: 60
      maximum_attempts_before_failure: 10
      batch_aggregation_shard_count: 32

  janus_1_collection_job_driver.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_1"
      health_check_listen_address: "0.0.0.0:8000"
      job_discovery_interval_secs: 10
      max_concurrent_job_workers: 10
      worker_lease_duration_secs: 600
      worker_lease_clock_skew_allowance_secs: 60
      maximum_attempts_before_failure: 10
      batch_aggregation_shard_count: 32

  janus_1_garbage_collector.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_1"
      health_check_listen_address: "0.0.0.0:8000"
      garbage_collection:
        gc_frequency_s: 60
        report_limit: 5000
        aggregation_limit: 500
        collection_limit: 50

  janus_2_aggregator.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_2"
      health_check_listen_address: "0.0.0.0:8000"
      listen_address: "0.0.0.0:8080"
      max_upload_batch_size: 100
      max_upload_batch_write_delay_ms: 250
      batch_aggregation_shard_count: 32
      aggregator_api:
        path_prefix: "aggregator-api"
        public_dap_url: "http://localhost:9002"

  janus_2_aggregation_job_creator.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_2"
      health_check_listen_address: "0.0.0.0:8000"
      batch_aggregation_shard_count: 32
      tasks_update_frequency_secs: 10
      aggregation_job_creation_interval_secs: 10
      min_aggregation_job_size: 10
      max_aggregation_job_size: 100

  janus_2_aggregation_job_driver.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_2"
      health_check_listen_address: "0.0.0.0:8000"
      job_discovery_interval_secs: 10
      max_concurrent_job_workers: 10
      worker_lease_duration_secs: 600
      worker_lease_clock_skew_allowance_secs: 60
      maximum_attempts_before_failure: 10
      batch_aggregation_shard_count: 32

  janus_2_collection_job_driver.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_2"
      health_check_listen_address: "0.0.0.0:8000"
      job_discovery_interval_secs: 10
      max_concurrent_job_workers: 10
      worker_lease_duration_secs: 600
      worker_lease_clock_skew_allowance_secs: 60
      maximum_attempts_before_failure: 10
      batch_aggregation_shard_count: 32

  janus_2_garbage_collector.yaml:
    content: |
      database:
        url: "postgres://postgres@postgres:5432/janus_2"
      health_check_listen_address: "0.0.0.0:8000"
      garbage_collection:
        gc_frequency_s: 60
        report_limit: 5000
        aggregation_limit: 500
        collection_limit: 50
