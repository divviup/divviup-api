name: cli-release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: release/tag to upload artifacts to
        required: true
        type: string

  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  get-api-version:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Get API version
        id: get-v
        run: |
          set -E -e -u -o pipefail || exit $?
          trap exit ERR
          v=${{ inputs.tag }}
          if [[ ! $v ]]; then
            if [[ $GITHUB_REF_TYPE != tag ]]; then
              printf '%s\n' "GITHUB_REF=${GITHUB_REF@Q} is not a tag" >&2
              exit 1
            fi
            v=$GITHUB_REF_NAME
          fi
          printf '%s\n' v=$v >>$GITHUB_OUTPUT
    outputs:
      v: ${{ steps.get-v.outputs.v }}

  get-janus-version:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Get Janus version
        id: get-v
        run: |
          set -E -e -u -o pipefail || exit $?
          trap exit ERR
          git clone https://github.com/divviup/janus.git
          cd janus
          v=$(git describe --tags --abbrev=0)
          printf '%s\n' v=$v >>$GITHUB_OUTPUT
    outputs:
      v: ${{ steps.get-v.outputs.v }}

  upload-bring-your-own:
    needs:
      - get-api-version
      - get-janus-version
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Pick directory name
        id: pick-d
        run: |
          d=divviup-bring-your-own
          printf '%s\n' d=$d >>$GITHUB_OUTPUT
      - name: Create archive
        run: |
          set -E -e -u -o pipefail || exit $?
          trap exit ERR
          d=${{ steps.pick-d.outputs.d }}
          v=${{ needs.get-api-version.outputs.v }}
          jv=${{ needs.get-janus-version.outputs.v }}
          mv bring-your-own $d
          sed -i "
            /DIVVIUP/ s|:latest\$|:$v|
            /JANUS/ s|:latest\$|:$jv|
          " $d/*/.env
          tar czf $d.tar.gz $d
      - name: Publish archive
        env:
          GH_TOKEN: ${{ secrets.DIVVIUP_GITHUB_AUTOMATION_RELEASE_PAT }}
        run: |
          set -E -e -u -o pipefail || exit $?
          trap exit ERR
          d=${{ steps.pick-d.outputs.d }}
          v=${{ needs.get-api-version.outputs.v }}
          gh release upload $v $d.tar.gz

  upload-compose-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve inputs
        id: resolve-inputs
        # Use tag input if available, otherwise parse it out of the git ref
        run: |
          TAG_INPUT=${{ inputs.tag }}
          echo "tag=${TAG_INPUT:-${GITHUB_REF/refs\/tags\//}}" >> $GITHUB_OUTPUT
      - name: Publish
        env:
          GH_TOKEN: '${{ secrets.DIVVIUP_GITHUB_AUTOMATION_RELEASE_PAT }}'
        run: |
          gh release upload ${{ steps.resolve-inputs.outputs.tag }} compose.yaml

  build-cli:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
        target: [
          {
            os: "ubuntu-latest",
            triple-suffix: "unknown-linux-gnu",
            extension: "",
            extra-build-flags: ""
          },
          {
            os: "windows-latest",
            triple-suffix: "pc-windows-msvc",
            extension: ".exe",
            # Build with ring on Windows so we don't have to set up aws-lc-rs' toolchain
            extra-build-flags: "--no-default-features --features ring,common"
          },
          {
            os: "macos-latest",
            triple-suffix: "apple-darwin",
            extension: "",
            extra-build-flags: ""
          }
        ]
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Resolve inputs
        id: resolve-inputs
        # Use tag input if available, otherwise parse it out of the git ref
        run: |
          TAG_INPUT=${{ inputs.tag }}
          echo "tag=${TAG_INPUT:-${GITHUB_REF/refs\/tags\//}}" >> $GITHUB_OUTPUT
          TRIPLE=`printf '%s-%s' ${{ matrix.arch }} ${{ matrix.target.triple-suffix }}`
          echo "triple=$TRIPLE" >> $GITHUB_OUTPUT
          EXECUTABLE=`printf 'divviup-%s%s' $TRIPLE ${{ matrix.target.extension }}`
          echo "executable=$EXECUTABLE" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: houseabsolute/actions-rust-cross@v1
        with:
          target: ${{ steps.resolve-inputs.outputs.triple }}
          args: ${{ format('--locked --release --package divviup-cli {0}', matrix.target.extra-build-flags) }}
          strip: true
      - name: Publish
        env:
          GH_TOKEN: '${{ secrets.DIVVIUP_GITHUB_AUTOMATION_RELEASE_PAT }}'
        run: |
          cp target/${{ steps.resolve-inputs.outputs.triple }}/release/divviup${{ matrix.target.extension }} \
            ./${{ steps.resolve-inputs.outputs.executable }}
          gh release upload \
            ${{ steps.resolve-inputs.outputs.tag }} ${{ steps.resolve-inputs.outputs.executable }}
